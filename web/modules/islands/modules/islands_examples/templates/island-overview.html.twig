{{ attach_library('islands_examples/example_component') }}
{{ attach_library('islands_examples/example_styles') }}
{{ attach_library('islands_examples/code_block') }}

<ul>
  <li><b><a href="/islands-examples">Overview</a></b></li>
  <li><a href="/islands-examples/preact">Preact</a></li>
  <li><a href="/islands-examples/web-components">Web Components</a></li>
  <li><a href="/islands-examples/vue">Vue</a></li>
</ul>

<hr />

<p>Below is a basic web component. It won't be styled until js is loaded. This
first example proves that the component will initialize without the use of
islands.</p>

<example-component>This is an example component</example-component>

<code-block language="html" label="twig" controls>
  <textarea>
<example-component>This is an example component</example-component>
  </textarea>
</code-block>

<hr />

<p>Dotted borders below signify the drupal-island elements. They will load the example component using a variety of different behaviors.</p>

{# Todo - show code snippets here #}
<drupal-island on:visible>
  <example-component>This component will load when visible</example-component>
</drupal-island>

<code-block language="html" label="twig" controls>
  <textarea>
<drupal-island on:visible>
  <example-component>This component will load when visible</example-component>
</drupal-island>
  </textarea>
</code-block>

<hr />

<drupal-island on:idle>
  <example-component>This component will load after the initial page load using requestIdleCallback()</example-component>
</drupal-island>

<code-block language="html" label="twig" controls>
  <textarea>
<drupal-island on:idle>
  <example-component>This component will load after the initial page load using requestIdleCallback()</example-component>
</drupal-island>
  </textarea>
</code-block>

<hr />

<drupal-island on:interaction>
  <example-component>This component will only load on interaction (click, touch, etc)</example-component>
</drupal-island>

<code-block language="html" label="twig" controls>
  <textarea>
<drupal-island on:interaction>
  <example-component>This component will only load on interaction (click, touch, etc)</example-component>
</drupal-island>
  </textarea>
</code-block>

<hr />

<drupal-island on:interaction>
  This component will only load on interaction, but it leaves this pre-js markup in place.
  <template data-island>
    <example-component>This is an example component</example-component>
  </template>
</drupal-island>

<code-block language="html" label="twig" controls>
  <textarea>
<drupal-island on:interaction>
  This component will only load on interaction, but it leaves this pre-js markup in place.
  <template data-island>
    <example-component>This is an example component</example-component>
  </template>
</drupal-island>
  </textarea>
</code-block>

<hr />

<drupal-island on:interaction>
  This component will only load on interaction, but replaces this pre-js markup.
  <template data-island="replace">
    <example-component>This is an example component</example-component>
  </template>
</drupal-island>

<code-block language="html" label="twig" controls>
  <textarea>
<drupal-island on:interaction>
  This component will only load on interaction, but replaces this pre-js markup.
  <template data-island="replace">
    <example-component>This is an example component</example-component>
  </template>
</drupal-island>
  </textarea>
</code-block>

<hr />

<p>Islands can also load framework components. Files in your template directory ending with .islands.js will be included in an <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap">import map</a> by referencing a key with the format <code>module_or_theme_name/filename</code>.</p>

<drupal-island on:visible
  autoinit="preact"
  import="islands_examples/preact-component.island.js"
  >
</drupal-island>

<code-block language="html" label="twig" controls>
  <textarea>
<drupal-island on:visible
  autoinit="preact"
  import="islands_examples/preact-component.island.js"
  >
</drupal-island>
  </textarea>
</code-block>

<code-block language="js" label="preact-component.island.js" controls>
  <textarea>
import { html, render } from "https://unpkg.com/htm/preact/index.mjs?module";
import { useState } from "https://unpkg.com/preact@latest/hooks/dist/hooks.module.js?module";

function App() {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount((prevState) => prevState + 1);
  };
  const decrement = () => {
    setCount((prevState) => prevState - 1);
  };

  return html`
    <span>Preact Counter: </span>
    <button onClick=${increment}>⬆️</button>
    <span> ${count} </span>
    <button onClick=${decrement}>⬇️</button>
  `;
}

export default function (el) {
  render(html`<${App} />`, el);
}
  </textarea>
</code-block>

<hr />

<p>Vue components can optionally be defined directly in your twig template.</p>

<drupal-island on:visible autoinit="petite-vue" import="https://unpkg.com/petite-vue@0.4.1/dist/petite-vue.es.js" v-scope="{ count: 0 }">
	Petite Vue
	<template data-island>
		<button @click="count++">⬆️</button>
		<button @click="count--">⬇️</button>
		<span v-html="count">0</span>
	</template>
</drupal-island>

<code-block language="html" label="twig" controls>
  <textarea>
<drupal-island
  on:visible autoinit="petite-vue"
  import="https://unpkg.com/petite-vue@0.4.1/dist/petite-vue.es.js"
  v-scope="{ count: 0 }">
	Petite Vue
	<template data-island>
		<button @click="count++">⬆️</button>
		<button @click="count--">⬇️</button>
		<span v-html="count">0</span>
	</template>
</drupal-island>
  </textarea>
</code-block>